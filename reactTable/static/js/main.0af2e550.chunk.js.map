{"version":3,"sources":["Loader/Loader.js","Table/Table.js","DetailRowView/DetailRowView.js","App.js","serviceWorker.js","index.js"],"names":["Loader_Loader","react_default","a","createElement","className","Table","props","onClick","onSort","bind","sortField","sort","data","map","item","key","id","phone","onRowSelect","firstName","lastName","email","DetailRowView","_ref","person","defaultValue","description","address","streetAddress","city","state","zip","App","isLoading","row","clonedData","_this","concat","sortType","orderedData","_","orderBy","setState","fetch","response","json","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0af2e550.chunk.js","sourcesContent":["import React from 'react'\nimport './Loader.css'\n\nexport default () => <div className=\"lds-dual-ring\" />","import React from 'react'\n\nexport default props => (\n  <table className=\"table\">\n  <thead>\n    <tr>\n      <th onClick={props.onSort.bind(null, 'id')}>\n        ID {props.sortField === 'id' ? <small>{props.sort}</small> : null}\n      </th>\n      <th onClick={props.onSort.bind(null, 'firstName')}>\n        First Name {props.sortField === 'firstName' ? <small>{props.sort}</small> : null}\n      </th>\n      <th onClick={props.onSort.bind(null, 'lastName')}>\n        Last Name {props.sortField === 'lastName' ? <small>{props.sort}</small> : null}\n      </th>\n      <th onClick={props.onSort.bind(null, 'email')}>\n        Email {props.sortField === 'email' ? <small>{props.sort}</small> : null}\n      </th>\n      <th onClick={props.onSort.bind(null, 'phone')}>\n        Phone {props.sortField === 'phone' ? <small>{props.sort}</small> : null}\n      </th>\n    </tr>\n  </thead>\n  <tbody>\n    {props.data.map(item => (\n      <tr key={item.id + item.phone} onClick={props.onRowSelect.bind(null, item)}>\n        <td>{item.id}</td>\n        <td>{item.firstName}</td>\n        <td>{item.lastName}</td>\n        <td>{item.email}</td>\n        <td>{item.phone}</td>\n      </tr>\n    ))}\n  </tbody>\n  </table>\n)","import React from 'react'\n\nexport default ({person}) => (\n  <div>\n    <p>Выбран пользователь <b>{person.firstName + ' ' + person.lastName}</b></p>\n    <p>\n    Описание: <br />\n    <textarea defaultValue={person.description} />\n    </p>\n\n    <p>Адрес проживания: <b>{person.address.streetAddress}</b></p>\n    <p>Город: <b>{person.address.city}</b></p>\n    <p>Провинция/штат: <b>{person.address.state}</b></p>\n    <p>Индекс: <b>{person.address.zip}</b></p>\n\n  </div>\n)","import React, { Component } from 'react'\nimport Loader from './Loader/Loader'\nimport Table from './Table/Table'\nimport DetailRowView from './DetailRowView/DetailRowView'\nimport _ from 'lodash'\n\nclass App extends Component {\n\n  state = {\n    isLoading: true,\n    data: [],\n    sort: 'asc', // desc\n    sortField: 'id',\n    row: null\n  }\n\n  async componentDidMount() {\n    const response = await fetch(`http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`)\n    const data = await response.json()\n\n    this.setState({\n      isLoading: false,\n      data: _.orderBy(data, this.state.sortField, this.state.sort)\n    })\n  }\n\n  onSort = sortField => {\n    const clonedData = this.state.data.concat()\n    const sortType = this.state.sort === 'asc' ? 'desc' : 'asc'\n\n    const orderedData = _.orderBy(clonedData, sortField, sortType)\n\n    this.setState({\n      data: orderedData,\n      sort: sortType,\n      sortField\n    })\n\n  }\n\n  onRowSelect = row => {\n    this.setState({row})\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        { \n          this.state.isLoading\n            ? <Loader />\n            : <Table\n              data={this.state.data}\n              onSort={this.onSort}\n              sort={this.state.sort}\n              sortField={this.state.sortField}\n              onRowSelect={this.onRowSelect}\n            />\n        }\n\n        {\n          this.state.row \n            ? <DetailRowView person={this.state.row} />\n            : null\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}